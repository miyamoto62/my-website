from flask import Flask, render_template, request, redirect
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from flask_migrate import Migrate
from flask_login import UserMixin, LoginManager, login_user, login_required,logout_user
from werkzeug.security import generate_password_hash, check_password_hash
import pytz
import os

app = Flask(__name__)

app.config["SECRET_KEY"] = os.urandom(24)


login_manager = LoginManager()
login_manager.init_app(app)

db = SQLAlchemy()
DB_INFO = {
    "user": "postgres",
    "password":"slta17",
    "host":"localhost",
    "name":"postgres"
}
SQLALCHEMY_DATABASE_URI = "postgresql+psycopg://{user}:{password}@{host}/{name}".format(**DB_INFO)
app.config["SQLALCHEMY_DATABASE_URI"] = SQLALCHEMY_DATABASE_URI
db.init_app(app)

migrate = Migrate(app, db)

class Post(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    title = db.Column(db.String(100),nullable=False)
    body = db.Column(db.String(1000),nullable=False)
    tokyo_timezone = pytz.timezone("Asia/Tokyo")
    created_at = db.Column(db.DateTime,nullable = False,default = datetime.now(tokyo_timezone))
    img_name = db.Column(db.String(100) , nullable=True)
    
class User(UserMixin,db.Model):
    id = db.Column(db.Integer, primary_key = True)
    username = db.Column(db.String(50),nullable=False, unique=True)
    password = db.Column(db.String(200),nullable=False)
    
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route("/index")
def index():
    posts = Post.query.all()
    return render_template("index.html",posts = posts)

@app.route("/admin")
@login_required
def admin():
    posts = Post.query.all()
    return render_template("admin.html",posts = posts)

@app.route("/create",methods=["GET","POST"])
@login_required
def create():
    if request.method == "POST":
        title = request.form.get("title")
        body = request.form.get("body")
        file = request.files["img"]
        filename = file.filename
        post = Post(title=title, body=body, img_name=filename)
        save_path = os.path.join( app.static_folder, "img", filename)
        file.save(save_path)
        db.session.add(post)
        db.session.commit()
        
        return redirect("/admin")
    elif request.method == "GET":
        return render_template("create.html", method="GET")
    
@app.route("/<int:post_id>/update",methods=["GET","POST"])
@login_required
def update(post_id):
    post = Post.query.get(post_id)
    if request.method == "POST":
        post.title = request.form.get("title")
        post.body = request.form.get("body")
        db.session.commit()
        
        return redirect("/admin")
    elif request.method == "GET":
        post = Post.query.get(post_id)
        return render_template("update.html", post=post)

@app.route("/<int:post_id>/delete")
@login_required
def delete(post_id):
    post = Post.query.get(post_id)
    db.session.delete(post)
    db.session.commit()
    return redirect("/admin")

@app.route("/signup",methods=["GET","POST"])
def signup():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        hashed_pass = generate_password_hash(password)
        user = User(username=username, password=hashed_pass)
        db.session.add(user)
        db.session.commit()
        return redirect("/login")
    
    elif request.method == "GET":
        return render_template("signup.html")
    
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        user = User.query.filter_by(username=username).first()
        if check_password_hash(user.password, password=password):
            login_user(user)
            return redirect("/admin")
        else:
            return redirect("/login", msg="ログイン名またはユーザー名が違います")
    elif request.method == "GET":    
        return render_template("login.html", msg="")
    
@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect("/login")
